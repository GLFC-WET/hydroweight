if(loi_numeric == FALSE){
loi_r <- lapply(categories, function(x){
brick_ret <- fasterize::fasterize(loi, raster = distance_weight,
by = x)
names(brick_ret) <- paste0(x, names(brick_ret))
brick_ret
})
loi_r <- brick(loi_r)
}
}
## Mask to roi
if(class(roi)[1] == "sf"){
roi_r <-  fasterize::fasterize(roi, raster = distance_weight)
} else {
roi_r <- roi
}
loi_r_mask <- raster::mask(loi_r, roi_r)
distance_weight_mask <- raster::mask(distance_weight, roi_r)
## Mask out region
if(!is.null(remove_region)){
if(class(remove_region)[1] == "sf"){
remove_region_r <-  fasterize::fasterize(remove_region, raster = distance_weight)
} else {
remove_region_r <- remove_region
}
loi_r_mask <- raster::mask(loi_r_mask, remove_region_r,
inverse = TRUE)
distance_weight_mask <- raster::mask(distance_weight_mask, remove_region_r,
inverse = TRUE)
}
## For raster data with loi_numeric numbers
if(loi_numeric == TRUE){
(loi_dist <- loi_r_mask * distance_weight_mask)
names(loi_dist) <- names(loi_r_mask)
loi_dist_ret <- lapply(names(loi_dist), function(x){
(loi_mean <- mean(loi_r_mask[[x]]@data@values, na.rm=T))
(loi_median <- median(loi_r_mask[[x]]@data@values, na.rm=T))
(loi_sd <- sd(loi_r_mask[[x]]@data@values, na.rm=T))
(loi_sum <- sum(loi_r_mask[[x]]@data@values, na.rm=T))
(loi_min <- min(loi_r_mask[[x]]@data@values, na.rm=T))
(loi_max <- max(loi_r_mask[[x]]@data@values, na.rm=T))
(loi_pixel_count <- sum(!is.na(loi_r_mask[[x]]@data@values)))
## Weighted mean
(loi_mean_distwtd <- loi_sum / sum(distance_weight_mask@data@values, na.rm=T))
## Weighted standard deviation
loi_sd_distwtd <- "NotCalculated"
## Not sure how to calculate yet
loi_stats <- data.frame(loi_mean, loi_median, loi_sd, loi_sum,
loi_min, loi_max,
loi_mean_distwtd, loi_sd_distwtd,
loi_pixel_count)
colnames(loi_stats) <- gsub("loi", x, colnames(loi_stats))
return(loi_stats)
})
loi_stats <- do.call(dplyr::bind_cols, loi_dist_ret)
}
## For raster data with categorical numbers
if(loi_numeric == FALSE){
## Construct brick if "RasterLayer"
if(class(loi_r_mask) == "RasterLayer"){
(uv <- unique(loi_r_mask@data@values))
(uv <- uv[!is.na(uv)])
brick_list <- lapply(uv, function(x){
loi_r_mask_ret <- loi_r_mask
loi_r_mask_ret[loi_r_mask_ret@data@values == x] <- 9999
loi_r_mask_ret[loi_r_mask_ret@data@values != 9999] <- NA
loi_r_mask_ret[loi_r_mask_ret@data@values == 9999] <- 1
return(loi_r_mask_ret)
})
loi_r_mask <- brick(brick_list)
names(loi_r_mask) <- uv
}
loi_dist <- loi_r_mask * distance_weight_mask
names(loi_dist) <- names(loi_r_mask)
(loi_pct_distwtd <- cellStats(loi_dist, stat = "sum") /
cellStats(distance_weight_mask, stat = "sum"))
(names(loi_pct_distwtd) <- names(loi_r_mask))
(loi_stats <- data.frame(t(loi_pct_distwtd)))
}
hwr <- hydroweight_test[[1]]
hydroweight_attribute_test_categorical <- lapply(hydroweight_test, function(hwr){
test_categoricalraster <- hydroweight_attributes(roi = tg_O_catchment,
loi = lulc,
loi_numeric = FALSE,
distance_weight = hwr,
remove_region = tg_O,
resample = "ngb",
return_products = TRUE,
uid = "1")
})
distance_weight = hwr
remove_region = tg_O
devtools::load_all(".")
roi = tg_O_catchment
loi = lulc
loi_numeric = FALSE
distance_weight = hwr
remove_region = tg_O
resample = "ngb"
return_products = TRUE
uid = "1"
test_categoricalraster <- hydroweight_attributes(roi = tg_O_catchment,
loi = lulc,
loi_numeric = FALSE,
distance_weight = hwr,
remove_region = tg_O,
resample = "ngb",
return_products = TRUE,
uid = "1")
test_categoricalraster
test_categoricalraster$loi_statistics
hydroweight_test
lulc
hydroweight_attribute_test_categorical <- lapply(hydroweight_test, function(hwr){
names(hwr)
test_categoricalraster <- hydroweight_attributes(roi = tg_O_catchment,
loi = lulc,
loi_numeric = FALSE,
distance_weight = hwr,
remove_region = tg_O,
resample = "ngb",
return_products = TRUE,
uid = "1",
)
})
test_categoricalraster <- hydroweight_attributes(roi = tg_O_catchment,
loi = lulc,
loi_numeric = FALSE,
distance_weight = hydroweight_test[[1]],
remove_region = tg_O,
resample = "ngb",
return_products = TRUE,
uid = "1",
)
test_categoricalraster <- hydroweight_attributes(roi = tg_O_catchment,
loi = lulc,
loi_numeric = FALSE,
distance_weight = hydroweight_test[[2]],
remove_region = tg_O,
resample = "ngb",
return_products = TRUE,
uid = "1",
)
hydroweight_test[[2]]
lulc
test_categoricalraster <- hydroweight_attributes(roi = tg_O_catchment,
loi = lulc,
loi_numeric = FALSE,
distance_weight = hydroweight_test[[3]],
remove_region = tg_O,
resample = "ngb",
return_products = TRUE,
uid = "1",
)
test_categoricalraster <- hydroweight_attributes(roi = tg_O_catchment,
loi = lulc,
loi_numeric = FALSE,
distance_weight = hydroweight_test[[4]],
remove_region = tg_O,
resample = "ngb",
return_products = TRUE,
uid = "1",
)
test_categoricalraster <- hydroweight_attributes(roi = tg_O_catchment,
loi = lulc,
loi_numeric = FALSE,
distance_weight = hydroweight_test[[5]],
remove_region = tg_O,
resample = "ngb",
return_products = TRUE,
uid = "1",
)
test_categoricalraster <- hydroweight_attributes(roi = tg_O_catchment,
loi = lulc,
loi_numeric = FALSE,
distance_weight = hydroweight_test[[6]],
remove_region = tg_O,
resample = "ngb",
return_products = TRUE,
uid = "1",
)
devtools::load_all(".")
?setExtent
test_categoricalraster <- hydroweight_attributes(roi = tg_O_catchment,
loi = lulc,
loi_numeric = FALSE,
distance_weight = hydroweight_test[[6]],
remove_region = tg_O,
resample = "ngb",
return_products = TRUE,
uid = "1",
)
?projectRaster
?extent
extent(hydroweight_test[[1]])
res(hydroweight_test[[1]])
origin(hydroweight_test[[1]])
extent(hydroweight_test[[1]])
res(hydroweight_test[[1]])
origin(hydroweight_test[[1]])
nrow(hydroweight_test[[1]])
ncol(hydroweight_test[[1]])
extent(lulc)
res(lulc)
origin(lulc)
nrow(lulc)
ncol(lulc)
loi_r <- raster::crop(loi, distance_weight)
plot(loi_r)
loi_r
distance_weight
message("Reprojecting to distance_weight extent, resolution, and origin.
This could be very slow given our choice of algorithm.
Consider reprojecting loi before this step")
message("Reprojecting to distance_weight extent, resolution, and origin.
This could be very slow given our choice of algorithm.
Consider reprojecting loi before this step")
test_categoricalraster <- hydroweight_attributes(roi = tg_O_catchment,
loi = lulc,
loi_numeric = FALSE,
distance_weight = hydroweight_test[[6]],
remove_region = tg_O,
resample = "ngb",
return_products = TRUE,
uid = "1",
)
tg_O_catchment
roi = tg_O_catchment
loi = lulc
loi_numeric = FALSE
distance_weight = hydroweight_test[[6]]
remove_region = tg_O
resample = "ngb"
return_products = TRUE
uid = "1"
class(loi)[1] == "RasterLayer"
(!identical(loi@crs, distance_weight@crs))
loi_r <- loi
loi_r <- raster::crop(loi, distance_weight)
plot(loi_r)
plot(distance_weight)
distance_weight = hydroweight_test[[6]]
loi
distance_weight
loi * distance_Weight
loi * distance_weight
loi_r <- setExtent(distance_weight)
loi_r <- setExtent(loi_r, distance_weight)
loi_r <- raster::crop(loi, distance_weight)
plot(loi_r)
plot(distance_weight)
loi_r
distance_weight
loi * distance_weight
loi_r <- loi
loi_r <- setExtent(loi_r, distance_weight)
loi * distance_weight
plot(loi * distance_weight)
plot(loi_r * distance_weight)
loi_r
distance_weight
loi_r <- loi
loi_r <- setExtent(loi_r, distance_weight)
loi_r <- raster::crop(loi, distance_weight)
loi_r
distance_weight
?setExtent
loi_r <- loi
loi_r <- setExtent(loi_r, distance_weight)
loi_r
distance_weight
plot(loi_r * distance_weight)
loi_r * distance_weight
loi_r
distance_weight
loi_r <- crop(loi_r, distance_weight)
loi_r
distance_weight
distance_weight = hydroweight_test[[6]]
loi = lulc
(!identical(loi@crs, distance_weight@crs))
loi
distance_weight
loi_r <- loi
loi_r <- setExtent(loi_r, distance_weight)
loi_r
distance_weight
loi_r <- raster::projectRaster(from = loi,
to  = distance_weight,
method = resample)
loi_r <- loi
loi_r <- setExtent(loi_r, distance_weight)
loi_r <- crop(loi_r, distance_weight)
loi_r
distance_Weight
distance_weight
lulc <- toy_dem
m <- c(0, 220, 1, 220, 300, 2, 300, 400, 3, 400, Inf, 4)
rclmat <- matrix(m, ncol = 3, byrow = TRUE)
lulc <- reclassify(lulc, rclmat)
plot(lulc)
lulc
loi <- lulc
loi
distance_weight
plot(loi_r)
plot(distance_weight)
loi_r <- loi
loi_r <- setExtent(loi_r, distance_weight)
loi_r <- crop(loi_r, distance_weight)
loi_r
loi_r <- loi
loi_r <- crop(loi_r, distance_weight)
loi_r
distance_weight
?crop
loi_r <- crop(loi_r, distance_weight, snap = "out")
loi_r
distance_weight
loi_r <- loi
loi_r <- crop(loi_r, distance_weight, snap = "out")
loi_r
distance_weight
loi_r * distance_weight
loi_r * distance_weight
loi_r <- raster::projectRaster(from = loi,
to = distance_weight,
method = resample)
loi_r
distance_weight
loi_r * distance_weight
devtools::load_all(".")
test_categoricalraster <- hydroweight_attributes(roi = tg_O_catchment,
loi = lulc,
loi_numeric = FALSE,
distance_weight = hydroweight_test[[6]],
remove_region = tg_O,
resample = "ngb",
return_products = TRUE,
uid = "1",
)
test_categoricalraster$loi_statistics
hydroweight_attribute_test_categorical <- lapply(hydroweight_test, function(hwr){
test_categoricalraster <- hydroweight_attributes(roi = tg_O_catchment,
loi = lulc,
loi_numeric = FALSE,
distance_weight = hwr,
remove_region = tg_O,
resample = "ngb",
return_products = TRUE,
uid = "1",
)
})
results <- lapply(hydroweight_attribute_test_numeric, function(x){x[[1]]})
results
par(mfrow=c(1,2))
plot(hydroweight_attribute_test_numeric[[1]][[2]])
plot(hydroweight_attribute_test_numeric[[1]][[3]])
plot(hydroweight_attribute_test_categorical[[1]][[2]])
plot(hydroweight_attribute_test_categorical[[1]][[3]])
plot(hydroweight_attribute_test_categorical[[1]][[2]])
plot(lulc)
plot(hydroweight_attribute_test_categorical[[1]][[2]])
plot(lulc)
plot(hydroweight_attribute_test_categorical[[1]][[2]])
plot(lulc)
plot(hydroweight_attribute_test_categorical[[1]][[2]])
plot(hydroweight_attribute_test_categorical[[1]][[3]])
devtools::load_all(".")
hydroweight_attribute_test_categorical <- lapply(hydroweight_test, function(hwr){
test_categoricalraster <- hydroweight_attributes(roi = tg_O_catchment,
loi = lulc,
loi_numeric = FALSE,
distance_weight = hwr,
remove_region = tg_O,
resample = "ngb",
return_products = TRUE,
uid = "1",
)
})
results <- lapply(hydroweight_attribute_test_categorical, function(x){x[[1]]})
results
devtools::load_all(".")
hist(toy_dem)
lulc <- toy_dem
m <- c(0, 220, 1, 220, 300, 2, 300, 400, 3, 400, Inf, 4)
rclmat <- matrix(m, ncol = 3, byrow = TRUE)
lulc <- reclassify(lulc, rclmat)
plot(lulc)
hydroweight_attribute_test_categorical <- lapply(hydroweight_test, function(hwr){
test_categoricalraster <- hydroweight_attributes(roi = tg_O_catchment,
loi = lulc,
loi_numeric = FALSE,
distance_weight = hwr,
remove_region = tg_O,
resample = "ngb",
return_products = TRUE,
uid = "1",
)
})
hydroweight_attribute_test_categorical <- lapply(hydroweight_test, function(hwr){
test_categoricalraster <- hydroweight_attributes(roi = tg_O_catchment,
loi = lulc,
loi_numeric = FALSE,
distance_weight = hwr,
remove_region = tg_O,
resample = "ngb",
return_products = TRUE,
uid = "1",
)
})
hydroweight_attribute_test_categorical <- lapply(hydroweight_test, function(hwr){
print(hwr)
test_categoricalraster <- hydroweight_attributes(roi = tg_O_catchment,
loi = lulc,
loi_numeric = FALSE,
distance_weight = hwr,
remove_region = tg_O,
resample = "ngb",
return_products = TRUE,
uid = "1",
)
})
test_categoricalraster <- hydroweight_attributes(roi = tg_O_catchment,
loi = lulc,
loi_numeric = FALSE,
distance_weight = hydroweight_test[[1]],
remove_region = tg_O,
resample = "ngb",
return_products = TRUE,
uid = "1",
)
test_categoricalraster <- hydroweight_attributes(roi = tg_O_catchment,
loi = lulc,
loi_numeric = FALSE,
distance_weight = hydroweight_test[[2]],
remove_region = tg_O,
resample = "ngb",
return_products = TRUE,
uid = "1",
)
distance_weight = hydroweight_test[[2]]
loi_numeric = FALSE
loi = lulc
tg_O_catchment
remove_region = tg_O
resample = "ngb"
return_products = TRUE
uid = "1"
class(loi)[1] == "RasterLayer"
(!identical(loi@crs, distance_weight@crs))
loi_r <- loi
distance_weight
loi_r
loi_r <- raster::projectRaster(from = loi_r,
to = distance_weight,
method = resample)
loi_r
distance_weight
loi_r
loi_r <- raster::crop(loi_r, distance_weight, snap = "out")
loi_r
hydroweight_attribute_test_categorical <- lapply(hydroweight_test, function(hwr){
print(hwr)
test_categoricalraster <- hydroweight_attributes(roi = tg_O_catchment,
loi = lulc,
loi_numeric = FALSE,
distance_weight = hydroweight_test[[2]],
remove_region = tg_O,
resample = "ngb",
return_products = TRUE,
uid = "1",
)
})
?CRS
?proj4string
?projectRaster
?gdalUtils::gdal_translate
?R.utils::copyDirectory()
?projectRaster
devtools::load_all(".")
hydroweight_attribute_test_categorical <- lapply(hydroweight_test, function(hwr){
print(hwr)
test_categoricalraster <- hydroweight_attributes(roi = tg_O_catchment,
loi = lulc,
loi_numeric = FALSE,
distance_weight = hydroweight_test[[2]],
remove_region = tg_O,
resample = "ngb",
return_products = TRUE,
uid = "1",
)
})
results <- lapply(hydroweight_attribute_test_categorical, function(x){x[[1]]})
results
hydroweight_attribute_test_categorical <- lapply(hydroweight_test, function(hwr){
print(hwr)
test_categoricalraster <- hydroweight_attributes(roi = tg_O_catchment,
loi = lulc,
loi_numeric = FALSE,
distance_weight = hwr,
remove_region = tg_O,
resample = "ngb",
return_products = TRUE,
uid = "1",
)
})
results <- lapply(hydroweight_attribute_test_categorical, function(x){x[[1]]})
results
par(mfrow=c(1,3))
plot(lulc)
plot(tg_O_catchment, col = adjustcolor("blue", alpha.f = 0.5), add = T)
