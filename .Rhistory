overwrite = TRUE
)
}
if (sf::st_is(target_O, "POINT")) {
target_O_r <- raster::rasterize(sf::st_coordinates(target_O),
y = dem_clip,
field = 1,
filename = file.path(hydroweight_dir, "TEMP-target_O_clip.tif"),
overwrite = TRUE
)
}
}
## write target_O and adjust to clip_region if RasterLayer
if (class(target_O)[1] == "RasterLayer") {
target_O_r <- target_O
raster::crs(target_O_r) <- dem_crs
raster::writeRaster(target_O_r, file.path(hydroweight_dir, "TEMP-target_O.tif"),
overwrite = TRUE
)
whitebox::wbt_clip_raster_to_polygon(
input = file.path(hydroweight_dir, "TEMP-target_O.tif"),
polygons = file.path(hydroweight_dir, "TEMP-clip_region.shp"),
output = file.path(hydroweight_dir, "TEMP-target_O_clip.tif"),
verbose = TRUE
)
target_O_r <- raster::raster(file.path(hydroweight_dir, "TEMP-target_O_clip.tif"))
}
## Prepare target_S ----
## If sf, write to .shp
if (class(target_S)[1] == "sf") {
sf::st_write(target_S, file.path(hydroweight_dir, "TEMP-target_S.shp"),
append = FALSE, quiet = TRUE
)
}
## If character, check if .shp or .tif, stop if not, then notify.
## If character and .shp or .tif, load and write to .shp
if (class(target_S)[1] == "character") {
if (!grepl(".shp", target_S) | !grepl(".tif", target_S)) {
stop("If target_S is character, target_S should be a .shp or .tif")
}
if (grepl(".shp", target_S)) {
target_S <- sf::st_read(file.path(hydroweight_dir, target_S))
sf::st_write(target_S, file.path(hydroweight_dir, "TEMP-target_S.shp"),
append = FALSE, quiet = TRUE
)
}
if (grepl(".tif", target_S)) {
target_S <- raster::raster(file.path(hydroweight_dir, target_S))
}
}
## write target_S and adjust to clip_region if sf
if (class(target_S)[1] == "sf") {
if (any(sf::st_is(target_S, c("POLYGON", "MULTIPOLYGON")))) {
target_S_r <- raster::rasterize(sf::as_Spatial(target_S),
y = dem_clip,
filename = file.path(hydroweight_dir, "TEMP-target_S_clip.tif"),
field = 1,
overwrite = TRUE
)
}
if (any(sf::st_is(target_S, c("LINESTRING", "MULTILINESTRING")))) {
target_S_r <- raster::rasterize(sf::as_Spatial(target_S),
y = dem_clip,
filename = file.path(hydroweight_dir, "TEMP-target_S_clip.tif"),
field = 1,
overwrite = TRUE
)
}
if (sf::st_is(target_S, "POINT")) {
target_S_r <- raster::rasterize(sf::st_coordinates(target_S),
y = dem_clip,
field = 1,
filename = file.path(hydroweight_dir, "TEMP-target_S_clip.tif"),
overwrite = TRUE
)
}
}
## write target_S and adjust to clip_region if RasterLayer
if (class(target_S)[1] == "RasterLayer") {
target_S_r <- target_S
raster::crs(target_S_r) <- dem_crs
raster::writeRaster(target_S_r, file.path(hydroweight_dir, "TEMP-target_S.tif"),
overwrite = TRUE
)
whitebox::wbt_clip_raster_to_polygon(
input = file.path(hydroweight_dir, "TEMP-target_S.tif"),
polygons = file.path(hydroweight_dir, "TEMP-clip_region.shp"),
output = file.path(hydroweight_dir, "TEMP-target_S_clip.tif"),
verbose = TRUE
)
target_S_r <- raster::raster(file.path(hydroweight_dir, "TEMP-target_S_clip.tif"))
}
message("Running distance-weighting @ ", Sys.time())
is.null(OS_combine)
e OS_combine if only doing stream distances
if (is.null(OS_combine)) {
OS_combine <- FALSE
}
if ("lumped" %in% weighting_scheme) {
lumped_inv <- dem_clip
lumped_inv[!is.na(lumped_inv)] <- 1
}
## iEucO, Euclidean distance to target_O ----
if ("iEucO" %in% weighting_scheme) {
cost <- dem_clip
cost[cost > 0] <- 1
raster::writeRaster(cost,
file.path(hydroweight_dir, "TEMP_dem_clip_cost.tif"),
overwrite = TRUE, options = c("COMPRESS=NONE")
)
whitebox::wbt_cost_distance(
source = file.path(hydroweight_dir, "TEMP-target_O_clip.tif"),
cost = file.path(hydroweight_dir, "TEMP_dem_clip_cost.tif"),
out_accum = file.path(hydroweight_dir, "TEMP-cost_distance.tif"),
out_backlink = file.path(hydroweight_dir, "TEMP-cost_backlink.tif"),
verbose_mode = TRUE
)
iEucO <- raster::raster(file.path(hydroweight_dir, "TEMP-cost_distance.tif"))
EucO_inv <- raster::calc(iEucO, fun = inv_function)
raster::writeRaster(EucO_inv,
file.path(hydroweight_dir, "TEMP-iEucO.tif"),
overwrite = TRUE, options = c("COMPRESS=NONE"),
Naflag = -9999
)
}
## iEucS, Euclidean distance to streams ----
if ("iEucS" %in% weighting_scheme) {
if (OS_combine == FALSE) {
whitebox::wbt_cost_distance(
source = file.path(hydroweight_dir, "TEMP-target_S_clip.tif"),
cost = file.path(hydroweight_dir, "TEMP_dem_clip_cost.tif"),
out_accum = file.path(hydroweight_dir, "TEMP-cost_distance.tif"),
out_backlink = file.path(hydroweight_dir, "TEMP-cost_backlink.tif"),
verbose_mode = TRUE
)
iEucS <- raster::raster(file.path(hydroweight_dir, "TEMP-cost_distance.tif"))
EucS_inv <- raster::calc(iEucS, fun = inv_function)
raster::writeRaster(EucS_inv,
file.path(hydroweight_dir, "TEMP-iEucS.tif"),
overwrite = TRUE, options = c("COMPRESS=NONE"),
Naflag = -9999
)
}
if (OS_combine == TRUE) {
target_S_OS <- target_S_r
target_O_OS <- target_O_r
target_S_OS[target_S_OS > 0] <- 1
target_O_OS[target_O_OS > 0] <- 1
mosaic_list <- list(target_O_OS, target_S_OS)
mosaic_list$fun <- sum
mosaic_list$na.rm <- TRUE
OS_combine_r <- do.call(raster::mosaic, mosaic_list)
OS_combine_r[OS_combine_r > 0] <- 1
OS_combine_r[OS_combine_r == 0] <- -9999
raster::crs(OS_combine_r) <- dem_crs
raster::writeRaster(OS_combine_r,
file.path(hydroweight_dir, "TEMP-OS_combine.tif"),
overwrite = TRUE, options = c("COMPRESS=NONE"),
Naflag = -9999
)
whitebox::wbt_cost_distance(
source = file.path(hydroweight_dir, "TEMP-OS_combine.tif"),
cost = file.path(hydroweight_dir, "TEMP_dem_clip_cost.tif"),
out_accum = file.path(hydroweight_dir, "TEMP-cost_distance.tif"),
out_backlink = file.path(hydroweight_dir, "TEMP-cost_backlink.tif"),
verbose_mode = TRUE
)
iEucS <- raster::raster(file.path(hydroweight_dir, "TEMP-cost_distance.tif"))
EucS_inv <- raster::calc(iEucS, fun = inv_function)
raster::writeRaster(EucS_inv,
file.path(hydroweight_dir, "TEMP-iEucS.tif"),
overwrite = TRUE, options = c("COMPRESS=NONE"),
Naflag = -9999
)
}
}
## iFLO, flow line distance to target_O ----
if ("iFLO" %in% weighting_scheme) {
whitebox::wbt_downslope_distance_to_stream(
dem = file.path(hydroweight_dir, "TEMP-dem_clip.tif"),
streams = file.path(hydroweight_dir, "TEMP-target_O_clip.tif"),
output = file.path(hydroweight_dir, "TEMP-flowdist.tif"),
verbose_mode = TRUE
)
iFLO <- raster::raster(file.path(hydroweight_dir, "TEMP-flowdist.tif"))
FLO_inv <- raster::calc(iFLO, fun = inv_function)
raster::crs(FLO_inv) <- dem_crs
raster::writeRaster(FLO_inv,
file.path(hydroweight_dir, "TEMP-iFLO.tif"),
overwrite = TRUE, options = c("COMPRESS=NONE"),
Naflag = -9999
)
}
## iFLS, flow line distance to target_S ----
if ("iFLS" %in% weighting_scheme) {
if (OS_combine == FALSE) {
whitebox::wbt_downslope_distance_to_stream(
dem = file.path(hydroweight_dir, "TEMP-dem_clip.tif"),
streams = file.path(hydroweight_dir, "TEMP-target_S_clip.tif"),
output = file.path(hydroweight_dir, "TEMP-flowdist.tif"),
verbose_mode = TRUE
)
iFLS <- raster::raster(file.path(hydroweight_dir, "TEMP-flowdist.tif"))
FLS_inv <- raster::calc(iFLS, fun = inv_function)
raster::crs(FLS_inv) <- dem_crs
raster::writeRaster(FLS_inv,
file.path(hydroweight_dir, "TEMP-iFLS.tif"),
overwrite = TRUE, options = c("COMPRESS=NONE"),
Naflag = -9999
)
}
if (OS_combine == TRUE) {
whitebox::wbt_downslope_distance_to_stream(
dem = file.path(hydroweight_dir, "TEMP-dem_clip.tif"),
streams = file.path(hydroweight_dir, "TEMP-OS_combine.tif"),
output = file.path(hydroweight_dir, "TEMP-flowdist.tif"),
verbose_mode = TRUE
)
iFLS <- raster::raster(file.path(hydroweight_dir, "TEMP-flowdist.tif"))
FLS_inv <- raster::calc(iFLS, fun = inv_function)
raster::crs(FLS_inv) <- dem_crs
raster::writeRaster(FLS_inv,
file.path(hydroweight_dir, "TEMP-iFLS.tif"),
overwrite = TRUE, options = c("COMPRESS=NONE"),
Naflag = -9999
)
}
}
## HA-iFLO and HA-iFLS, hydrologically active ----
if (("HAiFLO" %in% weighting_scheme) | ("HAiFLS" %in% weighting_scheme)) {
whitebox::wbt_clip_raster_to_polygon(
input = file.path(hydroweight_dir, flow_accum),
polygons = file.path(hydroweight_dir, "TEMP-clip_region.shp"),
output = file.path(hydroweight_dir, "TEMP-flow_accum_clip.tif"),
verbose = TRUE
)
accum_clip <- raster::raster(file.path(hydroweight_dir, "TEMP-flow_accum_clip.tif"))
accum_clip <- accum_clip + 1
if (OS_combine == TRUE) {
if ("HAiFLO" %in% weighting_scheme) {
HAFLO_inv <- FLO_inv * accum_clip
HAFLO_inv <- raster::mask(HAFLO_inv, OS_combine_r, maskvalue = 1)
raster::writeRaster(HAFLO_inv,
file.path(hydroweight_dir, "TEMP-HAiFLO.tif"),
overwrite = TRUE, options = c("COMPRESS=NONE"),
Naflag = -9999
)
}
if ("HAiFLS" %in% weighting_scheme) {
HAFLS_inv <- FLS_inv * accum_clip
HAFLS_inv <- raster::mask(HAFLS_inv, OS_combine_r, maskvalue = 1)
raster::writeRaster(HAFLS_inv,
file.path(hydroweight_dir, "TEMP-HAiFLS.tif"),
overwrite = TRUE, options = c("COMPRESS=NONE"),
Naflag = -9999
)
}
}
if (OS_combine == FALSE) {
if ("HAiFLO" %in% weighting_scheme) {
HAFLO_inv <- FLO_inv * accum_clip
HAFLO_inv <- raster::mask(HAFLO_inv, target_O_r, maskvalue = 1)
raster::writeRaster(HAFLO_inv,
file.path(hydroweight_dir, "TEMP-HAiFLO.tif"),
overwrite = TRUE, options = c("COMPRESS=NONE"),
Naflag = -9999
)
}
if ("HAiFLS" %in% weighting_scheme) {
HAFLS_inv <- FLS_inv * accum_clip
HAFLS_inv <- raster::mask(HAFLS_inv, target_S_r, maskvalue = 1)
raster::writeRaster(HAFLS_inv,
file.path(hydroweight_dir, "TEMP-HAiFLS.tif"),
overwrite = TRUE, options = c("COMPRESS=NONE"),
Naflag = -9999
)
}
}
}
OS_combine == TRUE
HAFLO_inv <- FLO_inv * accum_clip
HAFLO_inv <- raster::mask(HAFLO_inv, OS_combine_r, maskvalue = 1)
OS_combine == FALSE
?raster::mosaic
OS_combine_r <- do.call(raster::mosaic, mosaic_list)
accum_clip <- raster::raster(file.path(hydroweight_dir, "TEMP-flow_accum_clip.tif"))
accum_clip <- accum_clip + 1
accum_clip
if (OS_combine == TRUE) {
if ("HAiFLO" %in% weighting_scheme) {
HAFLO_inv <- FLO_inv * accum_clip
HAFLO_inv <- raster::mask(HAFLO_inv, OS_combine_r, maskvalue = 1)
raster::writeRaster(HAFLO_inv,
file.path(hydroweight_dir, "TEMP-HAiFLO.tif"),
overwrite = TRUE, options = c("COMPRESS=NONE"),
Naflag = -9999
)
}
HAFLO_inv <- FLO_inv * accum_clip
HAFLO_inv <- raster::mask(HAFLO_inv, OS_combine_r, maskvalue = 1)
plot(HAFLO_inv)
devtools::load_all(".")
## Run hydroweight::hydroweight()
hw_test_1 <- hydroweight::hydroweight(
hydroweight_dir = hydroweight_dir,
target_O = tg_O,
target_S = tg_S,
target_uid = "Lake",
clip_region = NULL,
OS_combine = TRUE,
dem = "toy_dem_breached.tif",
dem_crs = crs(toy_dem),
flow_accum = "toy_dem_breached_accum.tif",
weighting_scheme = c(
"lumped", "iEucO", "iFLO", "HAiFLO",
"iEucS", "iFLS", "HAiFLS"
),
inv_function = myinv
)
devtools::load_all(".")
hw_test_1 <- hydroweight::hydroweight(
hydroweight_dir = hydroweight_dir,
target_O = tg_O,
target_S = tg_S,
target_uid = "Lake",
clip_region = NULL,
OS_combine = TRUE,
dem = "toy_dem_breached.tif",
dem_crs = crs(toy_dem),
flow_accum = "toy_dem_breached_accum.tif",
weighting_scheme = c(
"lumped", "iEucO", "iFLO", "HAiFLO",
"iEucS", "iFLS", "HAiFLS"
),
inv_function = myinv
)
## Plot different weighting schemes; where purple --> yellow == low --> high weight
par(mfrow = c(2, 4), mar = c(1, 1, 1, 1), oma = c(0, 0, 0, 0))
layout(matrix(c(
1, 2, 3, 4,
1, 5, 6, 7
), nrow = 2, byrow = TRUE))
plot(hw_test_1[[1]], main = "Lumped", axes = F, legend = F, box = FALSE, col = viridis(101))
plot(hw_test_1[[2]], main = "iEucO", axes = F, legend = F, box = FALSE, col = viridis(101))
plot(hw_test_1[[3]], main = "iFLO", axes = F, legend = F, box = FALSE, col = viridis(101))
plot(log(hw_test_1[[4]]), main = "HAiFLO", axes = F, legend = F, box = FALSE, col = viridis(101))
plot.new()
plot(hw_test_1[[5]], main = "iEucS", axes = F, legend = F, box = FALSE, col = viridis(101))
plot(hw_test_1[[6]], main = "iFLS", axes = F, legend = F, box = FALSE, col = viridis(101))
plot(log(hw_test_1[[7]]), main = "HAiFLS", axes = F, legend = F, box = FALSE, col = viridis(101))
## For hydroweight, there are target_O and target_S
## target_O is a target point/area for calculating distances
## target_S is a stream/waterbody target for calculating distances
## Generate target_O, tg_O, representing a lake, and its catchment
tg_O <- toy_dem < 220
tg_O[tg_O@data@values != 1] <- NA
writeRaster(tg_O, file.path(hydroweight_dir, "tg_O.tif"), overwrite = TRUE)
tg_O <- rasterToPolygons(tg_O, dissolve = TRUE)
tg_O <- st_as_sf(tg_O)
wbt_watershed(
d8_pntr = file.path(hydroweight_dir, "toy_dem_breached_d8.tif"),
pour_pts = file.path(hydroweight_dir, "tg_O.tif"),
output = file.path(hydroweight_dir, "tg_O_catchment.tif")
)
tg_O_catchment <- raster(file.path(hydroweight_dir, "tg_O_catchment.tif"))
tg_O_catchment <- rasterToPolygons(tg_O_catchment, dissolve = TRUE)
tg_O_catchment <- st_as_sf(tg_O_catchment)
## Generate target_S, tg_S, representing the stream network
tg_S <- raster(file.path(hydroweight_dir, "toy_dem_streams.tif"))
## Generate target_O, tg_O, representing several points along stream network, and their catchments
tg_O_multi <- raster(file.path(hydroweight_dir, "toy_dem_streams.tif"))
tg_O_multi <- rasterToPoints(tg_O_multi, spatial = TRUE)
tg_O_multi <- st_as_sf(tg_O_multi)
tg_O_multi <- tg_O_multi[st_coordinates(tg_O_multi)[, 1] < 675000, ] # selects single network
tg_O_multi <- tg_O_multi[c(10, 50, 100), ]
tg_O_multi$Site <- c(1, 2, 3)
tg_O_multi_catchment <- foreach(xx = 1:nrow(tg_O_multi), .errorhandling = "pass") %do% {
## Take individual stream point and write to file
sel <- tg_O_multi[xx, ]
st_write(sel, file.path(hydroweight_dir, "tg_O_multi_single.shp"),
delete_layer = TRUE, quiet = TRUE
)
## Run watershed operation on stream point
wbt_watershed(
d8_pntr = file.path(hydroweight_dir, "toy_dem_breached_d8.tif"),
pour_pts = file.path(hydroweight_dir, "tg_O_multi_single.shp"),
output = file.path(hydroweight_dir, "tg_O_multi_single_catchment.tif")
)
## Load catchment and convert to polygon with Site code.
sel_catchment_r <- raster(file.path(hydroweight_dir, "tg_O_multi_single_catchment.tif"))
sel_catchment_r <- rasterToPolygons(sel_catchment_r, dissolve = TRUE)
sel_catchment_r$Site <- sel$Site
sel_catchment_r <- st_as_sf(sel_catchment_r)
return(sel_catchment_r)
}
tg_O_multi_catchment <- do.call(bind_rows, tg_O_multi_catchment)
## Plot locations
plot(toy_dem, legend = TRUE, col = viridis(101), main = "Toy DEM")
plot(tg_S, col = "grey", add = TRUE, legend = FALSE)
plot(st_geometry(tg_O), col = "red", add = TRUE)
plot(st_geometry(tg_O_multi), col = "red", pch = 25, add = TRUE)
plot(st_geometry(tg_O_multi_catchment), col = NA, border = "red", add = TRUE)
legend("bottom", legend = c("target_O sites", "target_S"), fill = c("red", "grey"), horiz = TRUE, bty = "n")
## For hydroweight, there are target_O and target_S
## target_O is a target point/area for calculating distances
## target_S is a stream/waterbody target for calculating distances
## Generate target_O, tg_O, representing a lake, and its catchment
tg_O <- toy_dem < 220
tg_O[tg_O@data@values != 1] <- NA
writeRaster(tg_O, file.path(hydroweight_dir, "tg_O.tif"), overwrite = TRUE)
tg_O <- rasterToPolygons(tg_O, dissolve = TRUE)
tg_O <- st_as_sf(tg_O)
wbt_watershed(
d8_pntr = file.path(hydroweight_dir, "toy_dem_breached_d8.tif"),
pour_pts = file.path(hydroweight_dir, "tg_O.tif"),
output = file.path(hydroweight_dir, "tg_O_catchment.tif")
)
tg_O_catchment <- raster(file.path(hydroweight_dir, "tg_O_catchment.tif"))
tg_O_catchment <- rasterToPolygons(tg_O_catchment, dissolve = TRUE)
tg_O_catchment <- st_as_sf(tg_O_catchment)
## Generate target_S, tg_S, representing the stream network
tg_S <- raster(file.path(hydroweight_dir, "toy_dem_streams.tif"))
## Generate target_O, tg_O, representing several points along stream network, and their catchments
tg_O_multi <- raster(file.path(hydroweight_dir, "toy_dem_streams.tif"))
tg_O_multi <- rasterToPoints(tg_O_multi, spatial = TRUE)
tg_O_multi <- st_as_sf(tg_O_multi)
tg_O_multi <- tg_O_multi[st_coordinates(tg_O_multi)[, 1] < 675000, ] # selects single network
tg_O_multi <- tg_O_multi[c(10, 50, 100), ]
tg_O_multi$Site <- c(1, 2, 3)
tg_O_multi_catchment <- foreach(xx = 1:nrow(tg_O_multi), .errorhandling = "pass") %do% {
## Take individual stream point and write to file
sel <- tg_O_multi[xx, ]
st_write(sel, file.path(hydroweight_dir, "tg_O_multi_single.shp"),
delete_layer = TRUE, quiet = TRUE
)
## Run watershed operation on stream point
wbt_watershed(
d8_pntr = file.path(hydroweight_dir, "toy_dem_breached_d8.tif"),
pour_pts = file.path(hydroweight_dir, "tg_O_multi_single.shp"),
output = file.path(hydroweight_dir, "tg_O_multi_single_catchment.tif")
)
## Load catchment and convert to polygon with Site code.
sel_catchment_r <- raster(file.path(hydroweight_dir, "tg_O_multi_single_catchment.tif"))
sel_catchment_r <- rasterToPolygons(sel_catchment_r, dissolve = TRUE)
sel_catchment_r$Site <- sel$Site
sel_catchment_r <- st_as_sf(sel_catchment_r)
return(sel_catchment_r)
}
tg_O_multi_catchment <- do.call(bind_rows, tg_O_multi_catchment)
## Plot locations
plot(toy_dem, legend = TRUE, col = viridis(101), main = "Toy DEM")
plot(tg_S, col = "grey", add = TRUE, legend = FALSE)
plot(st_geometry(tg_O), col = "red", add = TRUE)
plot(st_geometry(tg_O_multi), col = "red", pch = 25, add = TRUE)
plot(st_geometry(tg_O_multi_catchment), col = NA, border = "red", add = TRUE)
legend("bottom", legend = c("target_O sites", "target_S"), fill = c("red", "grey"), horiz = TRUE, bty = "n")
## Ignoring target_O
hw_test_2 <- hydroweight::hydroweight(
hydroweight_dir = hydroweight_dir,
target_S = tg_S,
target_uid = "Lake",
dem = "toy_dem_breached.tif",
dem_crs = crs(toy_dem),
flow_accum = "toy_dem_breached_accum.tif",
weighting_scheme = c("lumped", "iEucS", "iFLS", "HAiFLS"),
inv_function = myinv
)
## Resultant structure:
# length(hw_test_3) ## 1 set of targets and 4 distance-weighted rasters
# hw_test_2[[1]] ## lumped
# hw_test_2[[2]] ## iEucS
# hw_test_2[[3]] ## iFLS
# hw_test_2[[4]] ## HAiFLS
## Ignoring target_S
hw_test_3 <- hydroweight::hydroweight(
hydroweight_dir = hydroweight_dir,
target_O = tg_O,
target_uid = "Lake",
dem = "toy_dem_breached.tif",
dem_crs = crs(toy_dem),
flow_accum = "toy_dem_breached_accum.tif",
weighting_scheme = c("lumped", "iEucO", "iFLO", "HAiFLO"),
inv_function = myinv
)
# length(hw_test_3) ## 1 set of targets and 4 distance-weighted rasters
# hw_test_3[[1]] ## lumped
# hw_test_3[[2]] ## iEucO
# hw_test_3[[3]] ## iFLO
# hw_test_3[[4]] ## HAiFLO
## Setting a clip region, see ?hydroweight
hw_test_4 <- hydroweight::hydroweight(
hydroweight_dir = hydroweight_dir,
target_O = tg_O,
target_S = tg_S,
target_uid = "Lake",
clip_region = 8000,
OS_combine = TRUE,
dem = "toy_dem_breached.tif",
dem_crs = crs(toy_dem),
flow_accum = "toy_dem_breached_accum.tif",
weighting_scheme = c(
"lumped", "iEucO", "iFLO", "HAiFLO",
"iEucS", "iFLS", "HAiFLS"
),
inv_function = myinv
)
## Plot
plot(hw_test_1[[1]], main = "iEucO - 8000 m clip", axes = FALSE, legend = FALSE, box = FALSE, col = viridis(101))
plot(hw_test_4[[2]], add = TRUE, axes = FALSE, legend = FALSE, box = FALSE, col = viridis(101))
devtools::load_all(".")
devtools::check()
devtools::check()
